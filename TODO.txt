Web scraper for EDGAR filings - Added to project
  - Use Node.js scraper for this
  - running the program will launch a localhost with the scraper

API service or web scraper for financial data - Added to project
  - This uses a section forked from FinMesh and modified for this application
  - A token must be added to request
  - You can specify sandbox by adding 'sandbox_state=True' to a request method

Database for current stock holdings - CRUD enable, feature basics complete
  - SQLite3 database
  TICKER STRING NOT NULL
  QUANTITY INT NOT NULL
  BASIS_PRICE REAL NOT NULL
  PRICE INT
  DATE_LAST_UPDATED DATE NOT NULL

Database for stock watchlist - CRUD enable, feature basics complete
  - SQLite3 database
  TICKER STRING NOT NULL
  PRICE INT NOT NULL

SQL Query Builder - Added to project
  - Table names are created dynamicaly by the program, and params are not supported by the sqlite library
  - Builds query strings for the main queries used.
  - Sanitizes user input of table names
  - Streamlines queries in the main module
  - These methods are probably too specific to the queries we need, but flexible if I need to expand them

Python layer to interact with databases - Basic interaction is done
  - access class with child class for each database
  - method to check that the databases exist and if not, it will create them?

Frontend GUI for navigation
  - TKinter is probably the best solution

November 17th
It looks like the backend is pretty much ready to go.
It will obviously need work once I know exactly how the GUI will interact but for now everything is working.
I reorganized the file structure to clean it up a bit.
